{
    "4156e7ed514139437340d055d2565e79bc1e6ced": "Fix prefix escaping at ShardClient.keys function\n\nCurrently, the keys function uses the make_key function which doesn't\nescape the prefix. In case the default * prefix is used and some\nother client uses the same redis db with non-default prefix, it\nmisleads to fetching of prefixed keys of the other client.\nIn order to fix the issue, we have to use the make_pattern function\ninstead of the make_key function.\n",
    "3a56d8ea27508eccbaaf81a26695f9e82c29c32f": "Remove unnecessary default of None\n\nPer Django docs, cache.get() should always return None if the key is not\nfound. Enforce this in the tests.\n\nhttps://docs.djangoproject.com/en/2.1/topics/cache/#django.core.caches.cache.get\n\n> If the object doesn\u2019t exist in the cache, cache.get() returns None:\n",
    "f139a880066d822bf2fa9df5f062a470a5f36305": "Add support redis-py 3.0.0\n\n- Make CacheKey inherit from str to fix exception \"Only bytes, strings\n  and numbers (ints, longs and floats) are acceptable for keys and\n  values.\"\n- .exists() now returns and integer, so update .has_key().\n- Update test matrix to include tests for both redis-py 2.x and the\n  latest version.\n\nFixes #342\n",
    "a357f74e713a3ab1a2e5eb1807760449a25fc67a": "atomic incr() if the key is not set (supporting only DefaultClient) (#305)\n\n* added ignore_key_check flag in 'incr' for the DefaultClient, this way we can still get default redis behaviour of creating a key when it doesnt exist in case of an INCR call. This param is added at the end of the existing func so that none of the existing callers will need change unless they want to use this functionality.\r\n\r\n* updated tests for incr changes\r\n\r\n* updated tests after merging latest master branch from niwinz\r\n\r\n* updated tests for ignore_key_check\r\n\r\n* updated tests for ignore_key_check to be run only with DefaultClient\r\n",
    "8e48b3342bbd3c43793b23f364be70ef3c601798": "Pass python_requires argument to setuptools\n\nHelps pip decide what version of the library to install.\n\nhttps://packaging.python.org/tutorials/distributing-packages/#python-requires\n\n> If your project only runs on certain Python versions, setting the\n> python_requires argument to the appropriate PEP 440 version specifier\n> string will prevent pip from installing the project on other Python\n> versions.\n\nhttps://setuptools.readthedocs.io/en/latest/setuptools.html#new-and-changed-setup-keywords\n\n> python_requires\n>\n> A string corresponding to a version specifier (as defined in PEP 440)\n> for the Python version, used to specify the Requires-Python defined in\n> PEP 345.\n",
    "b8ce3372dafa2dc4528aba406a99a30e97b5173f": "Fix add() with a negative timeout\n\nAdding to the cache with a negative timeout should be immediately\ninvalid. So don't bother adding it. The add is considered failed if the\nkey does not exist.\n\nFixing this allowed restoring a test from Django's session test suite,\nSessionTestsMixin.test_actual_expiry. Using django-redis as a cache with\nthe Session cache backend is now in full compliance.\n",
    "84242faf23b99cddac696f5ab7b35c106f94b007": "Fix unicode cache keys\n",
    "4c124cc387a112532836e1dd04c94582194c34da": "Add unit test for unicode cache keys\n",
    "1b18393d0739ec5822343756c4ed857a23a67fb4": "Merge pull request #257 from JamshedVesuna/master\n\nAccept generators in get_many keys",
    "202e4c319d28128b7bd4197477a503421e48faa8": "Accept generators in get_many keys\n",
    "2078ff09c75d1cd4702685a9cb6e5e8d168f921e": "Only overwrite password if is not already set.\n",
    "8b3b4823d04cde6e50a7a6a9394302a14d174c87": "Add support for `PASSWORD` key in options.\n\nAs alternative way to setup password.\n\nFixes #214\n",
    "739fc6e668ba7d7d2a2707b2e7444812a1836fe4": "make CacheKey a subclass of str\n",
    "8e3d792971cc3710d1da7699a8ccb56dc9151be5": "Merge pull request #211 from mackeyja92/patch-1\n\nUpdated year in license file",
    "dc0f8dc561d31fc4ff3412b08d0a6a1dd3d6941a": "Merge pull request #213 from mackeyja92/patch-3\n\nAdded Django 1.10 to tox testing",
    "be1e83ab06367fe8a0163b65a8f8ca1bcb323fc6": "Add the ability to specify the key prefix on delete and delete_pattern.\n",
    "30658fe13501ba55109b354e6afdb3af8cdba11d": "Merge pull request #169 from ostcar/fix_cache_clear\n\nFix cache.clear() to respect KEY_PREFIX",
    "db7c512438c2c0c22e282224f3af01befacf4321": "Fix cache.clear() to respect KEY_PREFIX\n\nBefore this commit cache.clear() called flushdb which deletes all keys.\n\nFixes #168\n",
    "0f3f546bd79478ae869ebb18ae3c4167d8b2b8fe": "Return empty dict from get_many()\n\n- Return an empty dict from django_redis.cache.RedisCache.get_many() when\n  IGNORE_EXCEPTIONS is True.\n- Convert omit_exception decorator to a callable. Pass it a return_value\n  keyword argument to specify a default return value when\n  IGNORE_EXCEPTIONS is True.\n",
    "1127531ed98352ba394ffe8e3f02b637fb28ae2a": "Impliment delete_pattern using scan_iter instead of keys",
    "964cd8c1e9d99e241adaaed291263bfcecbfa6b7": "Breaking change: timeout=0 now expires the key inmediatelly (ref #127).\n",
    "f4b5d60ec2b2d36beb3434adb14d7521401e91b8": "Fix wrong password conversion from old format to new url based.\n",
    "01c5b9fc6cb5edb81317fcad1a1ea13e6bebd291": "Add minor fixes to nx and timeout issues on set method.\n\nAdditionally fix potential bug on expiring keys on set\nmethod with nx=True.\n",
    "ad41a3f5306d96dadc3d495f8f1b378dafc49a5c": "Fix iter_keys wrong behavior with redis-py>=2.10.x\n",
    "5a25e62a4eb656e615fb8d90a0cad25c123883b9": "Merge pull request #81 from teferi/reverse_key_function\n\nAdd support for REVERSE_KEY_FUNCTION setting.",
    "afeefaa8b43a24bbdd6c79549de97ea4c5bb54e9": "REVERSE_KEY_FUNCTION: tests\n\nadded a test to check if a custom key function actually works\nalso fixed behaviour for old(1.4.x) django\n",
    "9abf85c53fb32129b0a7c30d610ad6b2c62f2da9": "REVERSE_KEY_FUNCTION: move parameter to CACHES settings\n\nIt seems more appropriate to have REVERSE_KEY_FUNCTION as an\noptional parameter next to KEY_FUNCTION than as a top-level parameter\n",
    "128678c2c97aa5fd44f3bdfd9805e0978fb31cb7": "keys/iter_keys: support for REVERSE_KEY_FUNCTION setting\n\ndjango provides a way to use a custom key function via KEY_FUNCTION\nsetting. To provide keys/iter_keys functionality properly redis_cache\nnow has a way to support custom revese_key function, that reverses\nthe key back.\n",
    "6585d57dc51b944cfa37f0e1fb0e9131a2d115f8": "Improve keys method.\n",
    "308bdc4fd7b1c860eaf4dc3ee5df6fc336646f36": "Add iter_keys method.\n",
    "d3221d9aea69128c075c186b9c49a82cf40369c8": "Improved key management for pool cache and explicit clone with dict constructor.\n\nThanks to @wolever\n",
    "22a4788a6ceab084de23b521d9a50ba138efae9b": "tests: test_timeout_negative: also test that key can be expired without being in the db.\n",
    "653d29e1b5c1d3dbf2a18d8043eedce38549d614": "delete now returns number of deleted keys instead of None\n\nIt might be usefull to allow app to know whether the key was actually deleted\nor it was not in the DB. Redis does this by returning the number of keys deleted.\ndjango-redis could mimic that behaviour without\nbreaking any existing functionality.\n",
    "3a650711e10a9988e602783d0ff333697a0a7ab1": "client: default: allow setting negative timeouts\n\nDjango tests now expect negative timeouts to be accepted\nand act as removal of cache.\nSee django/contrib/sessions/tests.py \u2014 SessionTestsMixin.test_actual_expiry\nIt seems logical to allow negative timeouts since redis supports them.\n\nTo avoid using the overhead of set+expire in a pipeline we just delete the key.\n",
    "07e8caae40cfe223a0095291090b01526bec3659": "Fix wrong behavior on incr_version method using sharded client.\n\nIt was used wrong client for set a new key.\n",
    "9f86c0270643e69df2940c6a70263d65f3225e45": "Fixes DJANGO_REDIS_IGNORE_EXCEPTIONS to handle cache.get('key', 'default')\n\nIncludes import fixes and renaming of ConnectionInterrumped to\nConnectionInterrupted.\n",
    "032bb7bd8af115cad758fd6daddbe07456abe16c": "DefaultClient's add method changed to use redis setnx. race condition about existence of key removed. #29\n",
    "c4c709ba9e259c4bee3ba12b39af8642d1be93c8": "Add missing has_key() method on sharded client.\n",
    "6cc1241a27743e461aedba428f649b999e61f52c": "Merge pull request #11 from vlinhart/patch-1\n\ndelete_pattern only if there are any keys to delete",
    "7180c7310da9fab664c9474823286d9c92f8845d": "delete_pattern only if there are any keys to delete\n\nif the pattern doesn't yield any keys error is thrown:\r\nERR wrong number of arguments for 'del' command",
    "d47c9c95d80ec86443ab9b93ff887598e5c91090": "Remove duplicated checking of key exists on incr method. Fix #7\n\nThank you very much to Serj Zavadsky (fevral13)\n",
    "b54ecf4bc9d2778ef45f4cf58ecdf01ae3303122": "Delete keys using wildcard syntax.\n",
    "c18358e8931bee0a204749f04846bf7d6ee5f9bf": "Add support for keys that do not expire.\n",
    "c195401fd38aaf459d489616e8853dd9471fd31b": "bugfix for calling mget with empty keys\n",
    "113c1b6d53599368bb053fb75f921b78003bd54e": "Removed custom connection pool\n\nThe are two reasons:\n* django already implements CacheClass instance as singleton, we don't\nneed to reimplement that\n* connection pool in redis.py is already tested, we shouldn't have to\ntest it again\n* default keywargs charset='utf-8' and errors='strict' are defaults in\nredis.py, se we don't need to copy it over\n",
    "df5d60633b8ace4d6f91886914408747cae62847": "Set expiration in one command\n\nSince redis 2.1 EXPIRE command should not return false if key exists\n",
    "712b0d99e5e78c949f3bb18558e58380d02fb4ef": "Removed django incompatibility\n\nDjango is using timeout=0 to use default timeout value.\n\nUsing timeout=0 to set non-volatile keys conflicts with django API.\n",
    "5f6f38362dd587aae78d9b8ff97a1e2fe800ba5d": "Added more tests to increase coverage and fixed a couple bugs.\n\nWe can't inherit a class from a basestring and instantiate it, so I changed\nthe base class to 'object' so we can still to the type checking.\n\nI also discovered a bug with the Django 1.3 compatibility work.  In the\nincr_version method, we were using the Redis's rename function to move the key,\nbut in Redis 2.0 you cannot rename a volitile key.\n\nAdded some moar authors\n",
    "ff32fd8f59038472b9a2161d5d3a8aefeea79282": "Separated the 1.3 compatible cache class from the rest of the code and reverted a few unneeded changes.\n\nThis also handles the key better internally to prevent multiple \"making\" of the key.",
    "408dd90604e71e17400c9256d90e2ff3dcee30ca": "Pass the origin key to the set method.\n",
    "8ee175f597886742841ff40dc45ec0c5359f185b": "Made it possible to have non-expiring keys\n\nThanks to Kami for the report and Jezdez for being awesome.\n",
    "1330e9223e3c1291c56dbce51d4aadcca6b4c82b": "Don't double prepare the key when setting the expiration.\n",
    "51a3843f5c767f7b39b2c3e2352793dbf3b4efd8": "Another minor change to only call mset if there are actual keys to set.\n",
    "3ec900463927fbe3fd14c4df1a4aa60b88c09c9c": "Only delete many keys if keys are given.\n",
    "992d4e2c7ecd0ad4ef809cda0da7f7f8bda54262": "Re-introduced CacheClass.prepare_key to be able to override key generation in subclasses.\n",
    "4f96e6db29db2ddb225bc5863e3bad86f84650c6": "Allow overriding of used database and password. E.g., use this to use a different database:\n\nCACHE_BACKEND = 'redis_cache.cache://127.0.0.1:6379?db=2'\n",
    "5735e4c4f10ae1907462d7d88eb176a7b98b5112": "Refactored get and set.\n\n- Got rid of _prepare_key and _prepare_value\n- Started using the base64 module directly\n- Use the highest pickle protocol available\n- Added a set_many method\n- Added a delete_many method\n- Added an expire method\n- Made get_many return a dictionary as required\n",
    "559c01c0a32a86b7c9d8320cad7858d64e7f7d7e": "Fixed a default timeout problem - if no timeout was specified the default timeout specified in settings was not used.\n\nNow, you have three choices:\n1. no timeout is specified - the default timeout is used\n2. timeout is specified and it's not False - the specified value is used\n3. timeout is specified as False - no timeout is set for this key and it does not expire\n"
}